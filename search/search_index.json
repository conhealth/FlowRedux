{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"FlowRedux \u00b6 Building kotlin multiplatform StateMachine made easy with DSL and coroutines. Usage \u00b6 sealed class State object LoadingState : State () data class ContentState ( val items : List < Item >) : State () data class ErrorState ( val error : Throwable ) : State () sealed class Action object RetryLoadingAction : Action () class MyStateMachine : FlowReduxStateMachine < State , Action >( LoadingState ){ init { spec { inState < LoadingState > { onEnter { getState , setState -> // executes this block whenever we enter LoadingState try { val items = loadItems () // suspending function / coroutine to load items setState { ContentState ( items ) } // Transition to ContentState } catch ( t : Throwable ) { setState { ErrorState ( t ) } // Transition to ErrorState } } } inState < ErrorState > { on < RetryLoadingAction > { action , getState , setState -> // executes this block whenever // ErrorState is current state and RetryLoadingAction is emitted setState { LoadingState } // Transition to LoadingState which loads list again } } inState < ContentState > { observeWhileInState ( flowOf ( 1 , 2 , 3 ) ) { getState , setState -> // observes the given flow as long as state is ContentState. // Once state is changed to another state the flow will automatically // stop emitting. } } } } } val statemachine = MyStateMachine () launch { // Launch a coroutine statemachine . state . collect { state -> // do something with new state like update UI renderUI ( state ) } } // emit an Action launch { // Launch a coroutine statemachine . dispatch ( Action ) } In an Android Application you would use it with AndroidX ViewModel like that: class MyViewModel @Inject constructor ( private val stateMachine : StateMachine ) : ViewModel () { val state : LiveData < State > = MutableLiveData < State >() init { viewModelScope . launch { // automatically canceled once ViewModel lifecycle reached destroyed. stateMachine . state . collect { newState -> state . value = newState } } } fun dispatch ( action : Action ) { viewModelScope . launch { stateMachine . dispatch ( action ) } } } Dependencies \u00b6 There are two artifacts that you can include as dependency:: 1. flowredux : this is the core library. Usually you dont want to use the core library directly but rather use the dsl . 2. dsl which provides a convenient DSL on top of the core library. Usually this is what you want. implementation 'com.freeletics.flowredux:flowredux-multiplatform:0.2.1' implementation 'com.freeletics.flowredux:dsl-multiplatform:0.2.1' JVM only \u00b6 implementation 'com.freeletics.flowredux:flowredux:0.2.1' implementation 'com.freeletics.flowredux:dsl:0.2.1' Native binaries \u00b6 implementation 'com.freeletics.flowredux:flowredux-iosx64:0.2.1' implementation 'com.freeletics.flowredux:flowredux-iosarm64:0.2.1' implementation 'com.freeletics.flowredux:flowredux-iosarm32:0.2.1' implementation 'com.freeletics.flowredux:flowredux-watchosx86:0.2.1' implementation 'com.freeletics.flowredux:flowredux-watchosarm64:0.2.1' implementation 'com.freeletics.flowredux:flowredux-watchosarm32:0.2.1' implementation 'com.freeletics.flowredux:flowredux-tvosx64:0.2.1' implementation 'com.freeletics.flowredux:flowredux-tvosxarm64:0.2.1' implementation 'com.freeletics.flowredux:dsl-iosx64:0.2.1' implementation 'com.freeletics.flowredux:dsl-iosarm64:0.2.1' implementation 'com.freeletics.flowredux:dsl-iosarm32:0.2.1' implementation 'com.freeletics.flowredux:dsl-watchosx86:0.2.1' implementation 'com.freeletics.flowredux:dsl-watchosarm64:0.2.1' implementation 'com.freeletics.flowredux:dsl-watchosarm32:0.2.1' implementation 'com.freeletics.flowredux:dsl-tvosx64:0.2.1' implementation 'com.freeletics.flowredux:dsl-tvosxarm64:0.2.1' JavaScript \u00b6 No javascript version release yet but its on our TODO list. Snapshot \u00b6 Latest snapshot (directly published from master branch from Travis CI): allprojects { repositories { // Your repositories. // ... // Add url to snapshot repository maven { url \"https://oss.sonatype.org/content/repositories/snapshots/\" } } } Then just use -SNAPSHOT suffix as version like implementation 'com.freeletics.flowredux:dsl:0.2.2-SNAPSHOT'","title":"FlowRedux"},{"location":"#flowredux","text":"Building kotlin multiplatform StateMachine made easy with DSL and coroutines.","title":"FlowRedux"},{"location":"#usage","text":"sealed class State object LoadingState : State () data class ContentState ( val items : List < Item >) : State () data class ErrorState ( val error : Throwable ) : State () sealed class Action object RetryLoadingAction : Action () class MyStateMachine : FlowReduxStateMachine < State , Action >( LoadingState ){ init { spec { inState < LoadingState > { onEnter { getState , setState -> // executes this block whenever we enter LoadingState try { val items = loadItems () // suspending function / coroutine to load items setState { ContentState ( items ) } // Transition to ContentState } catch ( t : Throwable ) { setState { ErrorState ( t ) } // Transition to ErrorState } } } inState < ErrorState > { on < RetryLoadingAction > { action , getState , setState -> // executes this block whenever // ErrorState is current state and RetryLoadingAction is emitted setState { LoadingState } // Transition to LoadingState which loads list again } } inState < ContentState > { observeWhileInState ( flowOf ( 1 , 2 , 3 ) ) { getState , setState -> // observes the given flow as long as state is ContentState. // Once state is changed to another state the flow will automatically // stop emitting. } } } } } val statemachine = MyStateMachine () launch { // Launch a coroutine statemachine . state . collect { state -> // do something with new state like update UI renderUI ( state ) } } // emit an Action launch { // Launch a coroutine statemachine . dispatch ( Action ) } In an Android Application you would use it with AndroidX ViewModel like that: class MyViewModel @Inject constructor ( private val stateMachine : StateMachine ) : ViewModel () { val state : LiveData < State > = MutableLiveData < State >() init { viewModelScope . launch { // automatically canceled once ViewModel lifecycle reached destroyed. stateMachine . state . collect { newState -> state . value = newState } } } fun dispatch ( action : Action ) { viewModelScope . launch { stateMachine . dispatch ( action ) } } }","title":"Usage"},{"location":"#dependencies","text":"There are two artifacts that you can include as dependency:: 1. flowredux : this is the core library. Usually you dont want to use the core library directly but rather use the dsl . 2. dsl which provides a convenient DSL on top of the core library. Usually this is what you want. implementation 'com.freeletics.flowredux:flowredux-multiplatform:0.2.1' implementation 'com.freeletics.flowredux:dsl-multiplatform:0.2.1'","title":"Dependencies"},{"location":"#jvm-only","text":"implementation 'com.freeletics.flowredux:flowredux:0.2.1' implementation 'com.freeletics.flowredux:dsl:0.2.1'","title":"JVM only"},{"location":"#native-binaries","text":"implementation 'com.freeletics.flowredux:flowredux-iosx64:0.2.1' implementation 'com.freeletics.flowredux:flowredux-iosarm64:0.2.1' implementation 'com.freeletics.flowredux:flowredux-iosarm32:0.2.1' implementation 'com.freeletics.flowredux:flowredux-watchosx86:0.2.1' implementation 'com.freeletics.flowredux:flowredux-watchosarm64:0.2.1' implementation 'com.freeletics.flowredux:flowredux-watchosarm32:0.2.1' implementation 'com.freeletics.flowredux:flowredux-tvosx64:0.2.1' implementation 'com.freeletics.flowredux:flowredux-tvosxarm64:0.2.1' implementation 'com.freeletics.flowredux:dsl-iosx64:0.2.1' implementation 'com.freeletics.flowredux:dsl-iosarm64:0.2.1' implementation 'com.freeletics.flowredux:dsl-iosarm32:0.2.1' implementation 'com.freeletics.flowredux:dsl-watchosx86:0.2.1' implementation 'com.freeletics.flowredux:dsl-watchosarm64:0.2.1' implementation 'com.freeletics.flowredux:dsl-watchosarm32:0.2.1' implementation 'com.freeletics.flowredux:dsl-tvosx64:0.2.1' implementation 'com.freeletics.flowredux:dsl-tvosxarm64:0.2.1'","title":"Native binaries"},{"location":"#javascript","text":"No javascript version release yet but its on our TODO list.","title":"JavaScript"},{"location":"#snapshot","text":"Latest snapshot (directly published from master branch from Travis CI): allprojects { repositories { // Your repositories. // ... // Add url to snapshot repository maven { url \"https://oss.sonatype.org/content/repositories/snapshots/\" } } } Then just use -SNAPSHOT suffix as version like implementation 'com.freeletics.flowredux:dsl:0.2.2-SNAPSHOT'","title":"Snapshot"},{"location":"contributing/","text":"Contributing \u00b6 To be done.","title":"Contributing"},{"location":"contributing/#contributing","text":"To be done.","title":"Contributing"},{"location":"dsl/","text":"DSL \u00b6 FlowRedux provides a convenient DSL to describe your state machine. This page introduces you the DSL that you can use. To do that we will stick with a simple example of loading a list of items from a web service. As you read this section and more concepts of the DSL will be introduced we will extend this sample. For now to get started, let\u2019s define the States our state machine has. As said before we loads a list of items from a web service and display that list. While loading the list we show a loading indicator on the screen and if an error occurs we show an error message on the screen with a retry button. This gives us the following states: sealed class State { // Shows a loading indicator on screen object LoadingState : State () // List of items loaded successfully, show it on screen data class ShowContentState ( val items : List < Item >) : State () // Error while loading happened data class ErrorState ( val cause : Throwable ) : State () } If we reached ErrorState we display an error message but also a button a user can click to retry loading the items. This gives us the following Actions : sealed class Action { object RetryLoadingAction : Action () } Initial State \u00b6 Every FlowReduxStateMachine needs an initial state. This is in which state the state machine starts. In our example we start with the LoadingState . class MyStateMachine ( private val httpClient : HttpClient ) : FlowReduxStateMachine < State , Action >( initialState = LoadingState ) { init { spec { // will be filled in next section ... } } } Please note the constructor parameter of FlowReduxStateMachine(initialState = ...) . This is how you define the initial state of your state machine. Next, we already see that we need an init {...} block containing a spec { ... } block inside. The spec { ... } block is actually where we write our DSL inside. inState \u00b6 The first concept we learn is inState class MyStateMachine ( private val httpClient : HttpClient ) : FlowReduxStateMachine < State , Action >( initialState = LoadingState ) { init { spec { inState < LoadingState > { ... } } } } Please note that inState itself doesn\u2019t do anything. All we did so far with inState<LoadingState> is set an entry point. Next let\u2019s discuss what an inState can contain as triggers to actually \u201cdo something\u201d: onEnter : Triggers whenever we enter that state on<Action> : Triggers whenever we are in this state and the specified action is triggered from the outside by calling FlowReduxStateMachine.dispatch(action) . observeWhileInState( flow ) : You can subscribe to any arbitarry Flow while your state machine is in that state. Let\u2019s try to go through them as we build our state machine: onEnter \u00b6 What do we want to do when we enter the LoadingState ? We want to do the http request, right? Let\u2019s do that by extending our example: class MyStateMachine ( private val httpClient : HttpClient ) : FlowReduxStateMachine < State , Action >( initialState = LoadingState ) { init { spec { inState < LoadingState > { onEnter { getState , setState -> // we entered the LoadingState, so let's do the http request try { val items = httpClient . loadItems () setState { ShowContentState ( items ) } } catch ( t : Throwable ) { setState { ErrorState ( t ) } } } } } } } There are a some new things like onEnter , getState and setState . We will cover getState and setState in dedicated sections. All you have to know about setState for now is that this is the way to set the next state in your state machine. Let\u2019s talk about onEnter : onEnter { ... } is running asynchronously in a coroutine . That means whatever you do inside the onEnter block is not blocking anything else. You can totally run here long running and expensive calls (like doing an http request). onEnter { ... } doesn\u2019t get canceled when the state machine transitioned to another state original state. Example: inState < LoadingState > { onEnter { getState , setState -> setState { ErrorState ( Exception ( \"Fake Exception\" ) } doA () doSomethingLongRunning () } } doA() and doSomethingLongRunning() are still executed even if setState { ... } which got executed before causes our state machine to move to the next state. The takeaway is: the full onEnter { ... } block will be executed once a state has been entered (there is an exception, we will talk about that in FlatMapPolicy section). on <Action> \u00b6 How do we deal with external user input like clicks in FlowRedux? This is what Actions are for. In FlowRedux DSL you can react on Actions by using a on<MyAction>{ ... } block. In our example we want to retry loading if we are in ErrorState and the user clicks on a retry button. Clicking on that button dispatches a RetryLoadingAction to our state machine. Let\u2019s extend our FlowReduxStateMachine to react on such an action if the current state is ErrorState : class MyStateMachine ( private val httpClient : HttpClient ) : FlowReduxStateMachine < State , Action >( initialState = LoadingState ) { init { spec { inState < LoadingState > { onEnter { getState , setState -> // we entered the LoadingState, so let's do the http request try { val items = httpClient . loadItems () setState { ShowContentState ( items ) } } catch ( t : Throwable ) { setState { ErrorState ( t ) } } } } // let's add a new inState{...} with an on{...} block \uf60e inState < ErrorState > { on < RetryLoadingAction > { action , getState , setState -> // This block triggers if we are in ErrorState // RetryLoadingAction has been dispatched to this state machine. // In that case we transition to LoadingState which then starts the http // request to load items. setState { LoadingState } } } } } } SetState \u00b6 GetState \u00b6 FlatMapPolicy \u00b6","title":"DSL"},{"location":"dsl/#dsl","text":"FlowRedux provides a convenient DSL to describe your state machine. This page introduces you the DSL that you can use. To do that we will stick with a simple example of loading a list of items from a web service. As you read this section and more concepts of the DSL will be introduced we will extend this sample. For now to get started, let\u2019s define the States our state machine has. As said before we loads a list of items from a web service and display that list. While loading the list we show a loading indicator on the screen and if an error occurs we show an error message on the screen with a retry button. This gives us the following states: sealed class State { // Shows a loading indicator on screen object LoadingState : State () // List of items loaded successfully, show it on screen data class ShowContentState ( val items : List < Item >) : State () // Error while loading happened data class ErrorState ( val cause : Throwable ) : State () } If we reached ErrorState we display an error message but also a button a user can click to retry loading the items. This gives us the following Actions : sealed class Action { object RetryLoadingAction : Action () }","title":"DSL"},{"location":"dsl/#initial-state","text":"Every FlowReduxStateMachine needs an initial state. This is in which state the state machine starts. In our example we start with the LoadingState . class MyStateMachine ( private val httpClient : HttpClient ) : FlowReduxStateMachine < State , Action >( initialState = LoadingState ) { init { spec { // will be filled in next section ... } } } Please note the constructor parameter of FlowReduxStateMachine(initialState = ...) . This is how you define the initial state of your state machine. Next, we already see that we need an init {...} block containing a spec { ... } block inside. The spec { ... } block is actually where we write our DSL inside.","title":"Initial State"},{"location":"dsl/#instate","text":"The first concept we learn is inState class MyStateMachine ( private val httpClient : HttpClient ) : FlowReduxStateMachine < State , Action >( initialState = LoadingState ) { init { spec { inState < LoadingState > { ... } } } } Please note that inState itself doesn\u2019t do anything. All we did so far with inState<LoadingState> is set an entry point. Next let\u2019s discuss what an inState can contain as triggers to actually \u201cdo something\u201d: onEnter : Triggers whenever we enter that state on<Action> : Triggers whenever we are in this state and the specified action is triggered from the outside by calling FlowReduxStateMachine.dispatch(action) . observeWhileInState( flow ) : You can subscribe to any arbitarry Flow while your state machine is in that state. Let\u2019s try to go through them as we build our state machine:","title":"inState"},{"location":"dsl/#onenter","text":"What do we want to do when we enter the LoadingState ? We want to do the http request, right? Let\u2019s do that by extending our example: class MyStateMachine ( private val httpClient : HttpClient ) : FlowReduxStateMachine < State , Action >( initialState = LoadingState ) { init { spec { inState < LoadingState > { onEnter { getState , setState -> // we entered the LoadingState, so let's do the http request try { val items = httpClient . loadItems () setState { ShowContentState ( items ) } } catch ( t : Throwable ) { setState { ErrorState ( t ) } } } } } } } There are a some new things like onEnter , getState and setState . We will cover getState and setState in dedicated sections. All you have to know about setState for now is that this is the way to set the next state in your state machine. Let\u2019s talk about onEnter : onEnter { ... } is running asynchronously in a coroutine . That means whatever you do inside the onEnter block is not blocking anything else. You can totally run here long running and expensive calls (like doing an http request). onEnter { ... } doesn\u2019t get canceled when the state machine transitioned to another state original state. Example: inState < LoadingState > { onEnter { getState , setState -> setState { ErrorState ( Exception ( \"Fake Exception\" ) } doA () doSomethingLongRunning () } } doA() and doSomethingLongRunning() are still executed even if setState { ... } which got executed before causes our state machine to move to the next state. The takeaway is: the full onEnter { ... } block will be executed once a state has been entered (there is an exception, we will talk about that in FlatMapPolicy section).","title":"onEnter"},{"location":"dsl/#onaction","text":"How do we deal with external user input like clicks in FlowRedux? This is what Actions are for. In FlowRedux DSL you can react on Actions by using a on<MyAction>{ ... } block. In our example we want to retry loading if we are in ErrorState and the user clicks on a retry button. Clicking on that button dispatches a RetryLoadingAction to our state machine. Let\u2019s extend our FlowReduxStateMachine to react on such an action if the current state is ErrorState : class MyStateMachine ( private val httpClient : HttpClient ) : FlowReduxStateMachine < State , Action >( initialState = LoadingState ) { init { spec { inState < LoadingState > { onEnter { getState , setState -> // we entered the LoadingState, so let's do the http request try { val items = httpClient . loadItems () setState { ShowContentState ( items ) } } catch ( t : Throwable ) { setState { ErrorState ( t ) } } } } // let's add a new inState{...} with an on{...} block \uf60e inState < ErrorState > { on < RetryLoadingAction > { action , getState , setState -> // This block triggers if we are in ErrorState // RetryLoadingAction has been dispatched to this state machine. // In that case we transition to LoadingState which then starts the http // request to load items. setState { LoadingState } } } } } }","title":"on&lt;Action&gt;"},{"location":"dsl/#setstate","text":"","title":"SetState"},{"location":"dsl/#getstate","text":"","title":"GetState"},{"location":"dsl/#flatmappolicy","text":"","title":"FlatMapPolicy"},{"location":"flow_vs_FlowReduxStateMachine/","text":"FlowReduxStateMachine vs .reduxStore() \u00b6 The DSL provided by FlowRedux can be use int two ways: Extending from FlowReduxStateMachine Use .reduxStore() which is a custom operator on Kotlin\u2019s Flow type. FlowReduxStateMachine \u00b6 This is probably the easiest way to get started writing a State Machine with FlowRedux DSL. class MyStateMachine : FlowReduxStateMachine < State , Action >( InitialState ){ init { spec { // Your DSL goes inside this spec block. // Example: inState < State1 > { onAction < Action1 > { ... } } } } } See DSL section for more information how to use the DSL. The advantage of extending from FlowReduxStateMachine is that you get a ready a base template where you just have to fill in the DSL part inside the spec { ... } block. By extending from FlowReduxStateMachine your StateMachine inherits a dispatch(action : Action) method to dispatch Actions to your state machine and a val state: Flow<State> to observe your state machine\u2019s state. Whenever the state changes, the latest State will be emitted to this Flow . .reduxStore() \u00b6 If you want to work with Flow type directly FlowRedux provides you a custom operator called .reduxStore() . It is a custom operator like any other Flow operator like Flow.map { ... } . The idea is that the upstream Flow brings the actions to your FlowReduxStore like this: sealed class Action { object Action1 : MyAction () object Action2 : MyAction () } // // Example // val actionFlow : Flow < Action > = flowOf { // Let's assume emit ( Action1 ) delay ( 2000 ) emit ( Action2 ) } val stateFlow : Flow < State > = actionFlow // actionFlow is the input actions to the state machine . reduxStore < Action , State > { // Your DSL goes inside this spec block. // Example: inState < State1 > { onAction < Action1 > { ... } } } stateFlow . collect { state -> updateUi ( state ) }","title":"FlowReduxStateMachine vs .reduxStore()"},{"location":"flow_vs_FlowReduxStateMachine/#flowreduxstatemachine-vs-reduxstore","text":"The DSL provided by FlowRedux can be use int two ways: Extending from FlowReduxStateMachine Use .reduxStore() which is a custom operator on Kotlin\u2019s Flow type.","title":"FlowReduxStateMachine vs .reduxStore()"},{"location":"flow_vs_FlowReduxStateMachine/#flowreduxstatemachine","text":"This is probably the easiest way to get started writing a State Machine with FlowRedux DSL. class MyStateMachine : FlowReduxStateMachine < State , Action >( InitialState ){ init { spec { // Your DSL goes inside this spec block. // Example: inState < State1 > { onAction < Action1 > { ... } } } } } See DSL section for more information how to use the DSL. The advantage of extending from FlowReduxStateMachine is that you get a ready a base template where you just have to fill in the DSL part inside the spec { ... } block. By extending from FlowReduxStateMachine your StateMachine inherits a dispatch(action : Action) method to dispatch Actions to your state machine and a val state: Flow<State> to observe your state machine\u2019s state. Whenever the state changes, the latest State will be emitted to this Flow .","title":"FlowReduxStateMachine"},{"location":"flow_vs_FlowReduxStateMachine/#reduxstore","text":"If you want to work with Flow type directly FlowRedux provides you a custom operator called .reduxStore() . It is a custom operator like any other Flow operator like Flow.map { ... } . The idea is that the upstream Flow brings the actions to your FlowReduxStore like this: sealed class Action { object Action1 : MyAction () object Action2 : MyAction () } // // Example // val actionFlow : Flow < Action > = flowOf { // Let's assume emit ( Action1 ) delay ( 2000 ) emit ( Action2 ) } val stateFlow : Flow < State > = actionFlow // actionFlow is the input actions to the state machine . reduxStore < Action , State > { // Your DSL goes inside this spec block. // Example: inState < State1 > { onAction < Action1 > { ... } } } stateFlow . collect { state -> updateUi ( state ) }","title":".reduxStore()"},{"location":"logging/","text":"Logging \u00b6 To be done.","title":"Logging"},{"location":"logging/#logging","text":"To be done.","title":"Logging"},{"location":"multiplatform/","text":"Multiplatform \u00b6 To be done.","title":"Multiplatform"},{"location":"multiplatform/#multiplatform","text":"To be done.","title":"Multiplatform"},{"location":"Javadoc/dsl/","text":"dsl Packages \u00b6 Name Summary (jvm) com.freeletics.flowredux.dsl com.freeletics.flowredux.dsl.flow Index \u00b6 All Types","title":"Index"},{"location":"Javadoc/dsl/#packages","text":"Name Summary (jvm) com.freeletics.flowredux.dsl com.freeletics.flowredux.dsl.flow","title":"Packages"},{"location":"Javadoc/dsl/#index","text":"All Types","title":"Index"},{"location":"Javadoc/dsl/com.freeletics.flowredux.dsl.flow/","text":"dsl / com.freeletics.flowredux.dsl.flow Package com.freeletics.flowredux.dsl.flow \u00b6","title":"Com.freeletics.flowredux.dsl.flow"},{"location":"Javadoc/dsl/com.freeletics.flowredux.dsl.flow/#package-comfreeleticsflowreduxdslflow","text":"","title":"Package com.freeletics.flowredux.dsl.flow"},{"location":"Javadoc/dsl/alltypes/","text":"All Types \u00b6 Name Summary (jvm) com.freeletics.flowredux.dsl.FlatMapPolicy \u00b6 Defines which flatMap behavior should be applied whenever a new values is emitted |(jvm) (extensions in package com.freeletics.flowredux.dsl) kotlinx.coroutines.flow.Flow \u00b6 |(jvm) com.freeletics.flowredux.dsl.FlowReduxStateMachine \u00b6 |(jvm) com.freeletics.flowredux.dsl.FlowReduxStoreBuilder \u00b6 |(jvm) com.freeletics.flowredux.dsl.InStateBuilderBlock \u00b6 |(jvm) com.freeletics.flowredux.dsl.InStateObserverBlock \u00b6 |(jvm) com.freeletics.flowredux.dsl.InStateOnEnterBlock \u00b6 |(jvm) com.freeletics.flowredux.dsl.InStateSideEffectBuilder \u00b6 It\u2019s just not an Interface to not expose internal class Action to the public. Thus it\u2019s an internal abstract class but you can think of it as an internal interface. |(jvm) com.freeletics.flowredux.dsl.OnActionBlock \u00b6 |(jvm) com.freeletics.flowredux.dsl.OnActionInStateSideEffectBuilder \u00b6 |(jvm) com.freeletics.flowredux.dsl.OnEnterInStateSideEffectBuilder \u00b6 A builder that generates a SideEffect that triggers every time the state machine enters a certain state. |(jvm) com.freeletics.flowredux.dsl.SetState \u00b6 SetState allows you to set the state of your state machine. It\u2019s just a convinient way along with DSL. Usage: |(jvm) com.freeletics.flowredux.dsl.StoreWideBuilderBlock \u00b6 It\u2019s just not an Interface to not expose internal class Action to the public. Thus it\u2019s an internal abstract class but you can think of it as an internal interface. |(jvm) com.freeletics.flowredux.dsl.StoreWideObserverBlock \u00b6","title":"Index"},{"location":"Javadoc/dsl/alltypes/#all-types","text":"Name Summary (jvm)","title":"All Types"},{"location":"Javadoc/dsl/alltypes/#comfreeleticsflowreduxdslflatmappolicy","text":"Defines which flatMap behavior should be applied whenever a new values is emitted |(jvm) (extensions in package com.freeletics.flowredux.dsl)","title":"com.freeletics.flowredux.dsl.FlatMapPolicy"},{"location":"Javadoc/dsl/alltypes/#kotlinxcoroutinesflowflow","text":"|(jvm)","title":"kotlinx.coroutines.flow.Flow"},{"location":"Javadoc/dsl/alltypes/#comfreeleticsflowreduxdslflowreduxstatemachine","text":"|(jvm)","title":"com.freeletics.flowredux.dsl.FlowReduxStateMachine"},{"location":"Javadoc/dsl/alltypes/#comfreeleticsflowreduxdslflowreduxstorebuilder","text":"|(jvm)","title":"com.freeletics.flowredux.dsl.FlowReduxStoreBuilder"},{"location":"Javadoc/dsl/alltypes/#comfreeleticsflowreduxdslinstatebuilderblock","text":"|(jvm)","title":"com.freeletics.flowredux.dsl.InStateBuilderBlock"},{"location":"Javadoc/dsl/alltypes/#comfreeleticsflowreduxdslinstateobserverblock","text":"|(jvm)","title":"com.freeletics.flowredux.dsl.InStateObserverBlock"},{"location":"Javadoc/dsl/alltypes/#comfreeleticsflowreduxdslinstateonenterblock","text":"|(jvm)","title":"com.freeletics.flowredux.dsl.InStateOnEnterBlock"},{"location":"Javadoc/dsl/alltypes/#comfreeleticsflowreduxdslinstatesideeffectbuilder","text":"It\u2019s just not an Interface to not expose internal class Action to the public. Thus it\u2019s an internal abstract class but you can think of it as an internal interface. |(jvm)","title":"com.freeletics.flowredux.dsl.InStateSideEffectBuilder"},{"location":"Javadoc/dsl/alltypes/#comfreeleticsflowreduxdslonactionblock","text":"|(jvm)","title":"com.freeletics.flowredux.dsl.OnActionBlock"},{"location":"Javadoc/dsl/alltypes/#comfreeleticsflowreduxdslonactioninstatesideeffectbuilder","text":"|(jvm)","title":"com.freeletics.flowredux.dsl.OnActionInStateSideEffectBuilder"},{"location":"Javadoc/dsl/alltypes/#comfreeleticsflowreduxdslonenterinstatesideeffectbuilder","text":"A builder that generates a SideEffect that triggers every time the state machine enters a certain state. |(jvm)","title":"com.freeletics.flowredux.dsl.OnEnterInStateSideEffectBuilder"},{"location":"Javadoc/dsl/alltypes/#comfreeleticsflowreduxdslsetstate","text":"SetState allows you to set the state of your state machine. It\u2019s just a convinient way along with DSL. Usage: |(jvm)","title":"com.freeletics.flowredux.dsl.SetState"},{"location":"Javadoc/dsl/alltypes/#comfreeleticsflowreduxdslstorewidebuilderblock","text":"It\u2019s just not an Interface to not expose internal class Action to the public. Thus it\u2019s an internal abstract class but you can think of it as an internal interface. |(jvm)","title":"com.freeletics.flowredux.dsl.StoreWideBuilderBlock"},{"location":"Javadoc/dsl/alltypes/#comfreeleticsflowreduxdslstorewideobserverblock","text":"","title":"com.freeletics.flowredux.dsl.StoreWideObserverBlock"},{"location":"Javadoc/dsl/com.freeletics.flowredux.dsl/","text":"dsl / com.freeletics.flowredux.dsl Package com.freeletics.flowredux.dsl \u00b6 Types \u00b6 Name Summary (jvm) FlatMapPolicy Defines which flatMap behavior should be applied whenever a new values is emitted enum class FlatMapPolicy (jvm) FlowReduxStateMachine abstract class FlowReduxStateMachine<S : Any , A : Any > (jvm) FlowReduxStoreBuilder class FlowReduxStoreBuilder<S : Any , A : Any > (jvm) InStateBuilderBlock class InStateBuilderBlock<S : Any , SubState : S, A : Any > : StoreWideBuilderBlock <S, A> (jvm) InStateObserverBlock typealias InStateObserverBlock<T, S> = suspend (value: T, getState: StateAccessor<S>, setState: SetState <S>) -> Unit (jvm) InStateOnEnterBlock typealias InStateOnEnterBlock<S> = suspend (getState: StateAccessor<S>, setState: SetState <S>) -> Unit (jvm) InStateSideEffectBuilder It\u2019s just not an Interface to not expose internal class Action to the public. Thus it\u2019s an internal abstract class but you can think of it as an internal interface. abstract class InStateSideEffectBuilder<S, A> (jvm) OnActionBlock typealias OnActionBlock<S, A> = suspend (action: A, getState: StateAccessor<S>, setState: SetState <S>) -> Unit (jvm) OnActionInStateSideEffectBuilder class OnActionInStateSideEffectBuilder<S : Any , A : Any , SubState : S> : InStateSideEffectBuilder <S, A> (jvm) OnEnterInStateSideEffectBuilder A builder that generates a SideEffect that triggers every time the state machine enters a certain state. class OnEnterInStateSideEffectBuilder<S : Any , A : Any > : InStateSideEffectBuilder <S, A> (jvm) SetState SetState allows you to set the state of your state machine. It\u2019s just a convinient way along with DSL. Usage: abstract class SetState<S> (jvm) StoreWideBuilderBlock It\u2019s just not an Interface to not expose internal class Action to the public. Thus it\u2019s an internal abstract class but you can think of it as an internal interface. abstract class StoreWideBuilderBlock<S, A> (jvm) StoreWideObserverBlock typealias StoreWideObserverBlock<T, S> = suspend (value: T, getState: StateAccessor<S>, setState: SetState <S>) -> Unit Extensions for External Classes \u00b6 Name Summary (jvm) kotlinx.coroutines.flow.Flow","title":"Index"},{"location":"Javadoc/dsl/com.freeletics.flowredux.dsl/#package-comfreeleticsflowreduxdsl","text":"","title":"Package com.freeletics.flowredux.dsl"},{"location":"Javadoc/dsl/com.freeletics.flowredux.dsl/#types","text":"Name Summary (jvm) FlatMapPolicy Defines which flatMap behavior should be applied whenever a new values is emitted enum class FlatMapPolicy (jvm) FlowReduxStateMachine abstract class FlowReduxStateMachine<S : Any , A : Any > (jvm) FlowReduxStoreBuilder class FlowReduxStoreBuilder<S : Any , A : Any > (jvm) InStateBuilderBlock class InStateBuilderBlock<S : Any , SubState : S, A : Any > : StoreWideBuilderBlock <S, A> (jvm) InStateObserverBlock typealias InStateObserverBlock<T, S> = suspend (value: T, getState: StateAccessor<S>, setState: SetState <S>) -> Unit (jvm) InStateOnEnterBlock typealias InStateOnEnterBlock<S> = suspend (getState: StateAccessor<S>, setState: SetState <S>) -> Unit (jvm) InStateSideEffectBuilder It\u2019s just not an Interface to not expose internal class Action to the public. Thus it\u2019s an internal abstract class but you can think of it as an internal interface. abstract class InStateSideEffectBuilder<S, A> (jvm) OnActionBlock typealias OnActionBlock<S, A> = suspend (action: A, getState: StateAccessor<S>, setState: SetState <S>) -> Unit (jvm) OnActionInStateSideEffectBuilder class OnActionInStateSideEffectBuilder<S : Any , A : Any , SubState : S> : InStateSideEffectBuilder <S, A> (jvm) OnEnterInStateSideEffectBuilder A builder that generates a SideEffect that triggers every time the state machine enters a certain state. class OnEnterInStateSideEffectBuilder<S : Any , A : Any > : InStateSideEffectBuilder <S, A> (jvm) SetState SetState allows you to set the state of your state machine. It\u2019s just a convinient way along with DSL. Usage: abstract class SetState<S> (jvm) StoreWideBuilderBlock It\u2019s just not an Interface to not expose internal class Action to the public. Thus it\u2019s an internal abstract class but you can think of it as an internal interface. abstract class StoreWideBuilderBlock<S, A> (jvm) StoreWideObserverBlock typealias StoreWideObserverBlock<T, S> = suspend (value: T, getState: StateAccessor<S>, setState: SetState <S>) -> Unit","title":"Types"},{"location":"Javadoc/dsl/com.freeletics.flowredux.dsl/#extensions-for-external-classes","text":"Name Summary (jvm) kotlinx.coroutines.flow.Flow","title":"Extensions for External Classes"},{"location":"Javadoc/dsl/com.freeletics.flowredux.dsl/-in-state-observer-block/","text":"dsl / com.freeletics.flowredux.dsl / InStateObserverBlock InStateObserverBlock \u00b6 (jvm) typealias InStateObserverBlock<T, S> = suspend (value: T, getState: StateAccessor<S>, setState: SetState <S>) -> Unit","title":" in state observer block"},{"location":"Javadoc/dsl/com.freeletics.flowredux.dsl/-in-state-observer-block/#instateobserverblock","text":"(jvm) typealias InStateObserverBlock<T, S> = suspend (value: T, getState: StateAccessor<S>, setState: SetState <S>) -> Unit","title":"InStateObserverBlock"},{"location":"Javadoc/dsl/com.freeletics.flowredux.dsl/-in-state-on-enter-block/","text":"dsl / com.freeletics.flowredux.dsl / InStateOnEnterBlock InStateOnEnterBlock \u00b6 (jvm) typealias InStateOnEnterBlock<S> = suspend (getState: StateAccessor<S>, setState: SetState <S>) -> Unit","title":" in state on enter block"},{"location":"Javadoc/dsl/com.freeletics.flowredux.dsl/-in-state-on-enter-block/#instateonenterblock","text":"(jvm) typealias InStateOnEnterBlock<S> = suspend (getState: StateAccessor<S>, setState: SetState <S>) -> Unit","title":"InStateOnEnterBlock"},{"location":"Javadoc/dsl/com.freeletics.flowredux.dsl/-in-state-side-effect-builder/","text":"dsl / com.freeletics.flowredux.dsl / InStateSideEffectBuilder InStateSideEffectBuilder \u00b6 (jvm) abstract class InStateSideEffectBuilder<S, A> It\u2019s just not an Interface to not expose internal class Action to the public. Thus it\u2019s an internal abstract class but you can think of it as an internal interface. Inheritors \u00b6 Name Summary (jvm) OnActionInStateSideEffectBuilder class OnActionInStateSideEffectBuilder<S : Any , A : Any , SubState : S> : InStateSideEffectBuilder <S, A> (jvm) OnEnterInStateSideEffectBuilder A builder that generates a SideEffect that triggers every time the state machine enters a certain state. class OnEnterInStateSideEffectBuilder<S : Any , A : Any > : InStateSideEffectBuilder <S, A>","title":" in state side effect builder"},{"location":"Javadoc/dsl/com.freeletics.flowredux.dsl/-in-state-side-effect-builder/#instatesideeffectbuilder","text":"(jvm) abstract class InStateSideEffectBuilder<S, A> It\u2019s just not an Interface to not expose internal class Action to the public. Thus it\u2019s an internal abstract class but you can think of it as an internal interface.","title":"InStateSideEffectBuilder"},{"location":"Javadoc/dsl/com.freeletics.flowredux.dsl/-in-state-side-effect-builder/#inheritors","text":"Name Summary (jvm) OnActionInStateSideEffectBuilder class OnActionInStateSideEffectBuilder<S : Any , A : Any , SubState : S> : InStateSideEffectBuilder <S, A> (jvm) OnEnterInStateSideEffectBuilder A builder that generates a SideEffect that triggers every time the state machine enters a certain state. class OnEnterInStateSideEffectBuilder<S : Any , A : Any > : InStateSideEffectBuilder <S, A>","title":"Inheritors"},{"location":"Javadoc/dsl/com.freeletics.flowredux.dsl/-on-action-block/","text":"dsl / com.freeletics.flowredux.dsl / OnActionBlock OnActionBlock \u00b6 (jvm) typealias OnActionBlock<S, A> = suspend (action: A, getState: StateAccessor<S>, setState: SetState <S>) -> Unit","title":" on action block"},{"location":"Javadoc/dsl/com.freeletics.flowredux.dsl/-on-action-block/#onactionblock","text":"(jvm) typealias OnActionBlock<S, A> = suspend (action: A, getState: StateAccessor<S>, setState: SetState <S>) -> Unit","title":"OnActionBlock"},{"location":"Javadoc/dsl/com.freeletics.flowredux.dsl/-store-wide-builder-block/","text":"dsl / com.freeletics.flowredux.dsl / StoreWideBuilderBlock StoreWideBuilderBlock \u00b6 (jvm) abstract class StoreWideBuilderBlock<S, A> It\u2019s just not an Interface to not expose internal class Action to the public. Thus it\u2019s an internal abstract class but you can think of it as an internal interface. It\u2019s also not a sealed class because no need for it (no need to enumerate subclasses as we only care about the abstract functions this class exposes). Also sealed class would mean to move all subclasses into the same File. That is not that nice as it all subclasses are implementation detail heavy. There is no need to have a hundreds of lines of code in one file just to have sealed classes. Inheritors \u00b6 Name Summary (jvm) InStateBuilderBlock class InStateBuilderBlock<S : Any , SubState : S, A : Any > : StoreWideBuilderBlock <S, A>","title":" store wide builder block"},{"location":"Javadoc/dsl/com.freeletics.flowredux.dsl/-store-wide-builder-block/#storewidebuilderblock","text":"(jvm) abstract class StoreWideBuilderBlock<S, A> It\u2019s just not an Interface to not expose internal class Action to the public. Thus it\u2019s an internal abstract class but you can think of it as an internal interface. It\u2019s also not a sealed class because no need for it (no need to enumerate subclasses as we only care about the abstract functions this class exposes). Also sealed class would mean to move all subclasses into the same File. That is not that nice as it all subclasses are implementation detail heavy. There is no need to have a hundreds of lines of code in one file just to have sealed classes.","title":"StoreWideBuilderBlock"},{"location":"Javadoc/dsl/com.freeletics.flowredux.dsl/-store-wide-builder-block/#inheritors","text":"Name Summary (jvm) InStateBuilderBlock class InStateBuilderBlock<S : Any , SubState : S, A : Any > : StoreWideBuilderBlock <S, A>","title":"Inheritors"},{"location":"Javadoc/dsl/com.freeletics.flowredux.dsl/-store-wide-observer-block/","text":"dsl / com.freeletics.flowredux.dsl / StoreWideObserverBlock StoreWideObserverBlock \u00b6 (jvm) typealias StoreWideObserverBlock<T, S> = suspend (value: T, getState: StateAccessor<S>, setState: SetState <S>) -> Unit","title":" store wide observer block"},{"location":"Javadoc/dsl/com.freeletics.flowredux.dsl/-store-wide-observer-block/#storewideobserverblock","text":"(jvm) typealias StoreWideObserverBlock<T, S> = suspend (value: T, getState: StateAccessor<S>, setState: SetState <S>) -> Unit","title":"StoreWideObserverBlock"},{"location":"Javadoc/dsl/com.freeletics.flowredux.dsl/-flat-map-policy/","text":"dsl / com.freeletics.flowredux.dsl / FlatMapPolicy FlatMapPolicy \u00b6 (jvm) enum class FlatMapPolicy Defines which flatMap behavior should be applied whenever a new values is emitted Enum Values \u00b6 Name Summary (jvm) LATEST uses flatMapLatest (jvm) MERGE Uses flatMapMerge (jvm) CONCAT Uses flatMapConcat","title":"Index"},{"location":"Javadoc/dsl/com.freeletics.flowredux.dsl/-flat-map-policy/#flatmappolicy","text":"(jvm) enum class FlatMapPolicy Defines which flatMap behavior should be applied whenever a new values is emitted","title":"FlatMapPolicy"},{"location":"Javadoc/dsl/com.freeletics.flowredux.dsl/-flat-map-policy/#enum-values","text":"Name Summary (jvm) LATEST uses flatMapLatest (jvm) MERGE Uses flatMapMerge (jvm) CONCAT Uses flatMapConcat","title":"Enum Values"},{"location":"Javadoc/dsl/com.freeletics.flowredux.dsl/-flat-map-policy/-c-o-n-c-a-t/","text":"dsl / com.freeletics.flowredux.dsl / FlatMapPolicy / CONCAT CONCAT \u00b6 (jvm) CONCAT Uses flatMapConcat","title":" c o n c a t"},{"location":"Javadoc/dsl/com.freeletics.flowredux.dsl/-flat-map-policy/-c-o-n-c-a-t/#concat","text":"(jvm) CONCAT Uses flatMapConcat","title":"CONCAT"},{"location":"Javadoc/dsl/com.freeletics.flowredux.dsl/-flat-map-policy/-l-a-t-e-s-t/","text":"dsl / com.freeletics.flowredux.dsl / FlatMapPolicy / LATEST LATEST \u00b6 (jvm) LATEST uses flatMapLatest","title":" l a t e s t"},{"location":"Javadoc/dsl/com.freeletics.flowredux.dsl/-flat-map-policy/-l-a-t-e-s-t/#latest","text":"(jvm) LATEST uses flatMapLatest","title":"LATEST"},{"location":"Javadoc/dsl/com.freeletics.flowredux.dsl/-flat-map-policy/-m-e-r-g-e/","text":"dsl / com.freeletics.flowredux.dsl / FlatMapPolicy / MERGE MERGE \u00b6 (jvm) MERGE Uses flatMapMerge","title":" m e r g e"},{"location":"Javadoc/dsl/com.freeletics.flowredux.dsl/-flat-map-policy/-m-e-r-g-e/#merge","text":"(jvm) MERGE Uses flatMapMerge","title":"MERGE"},{"location":"Javadoc/dsl/com.freeletics.flowredux.dsl/-flow-redux-state-machine/","text":"dsl / com.freeletics.flowredux.dsl / FlowReduxStateMachine FlowReduxStateMachine \u00b6 (jvm) abstract class FlowReduxStateMachine<S : Any , A : Any > Constructors \u00b6 Name Summary (jvm) <init> FlowReduxStateMachine(initialStateSupplier: () -> S) FlowReduxStateMachine(initialState: S) FlowReduxStateMachine(logger: FlowReduxLogger?, initialState: S) FlowReduxStateMachine(logger: FlowReduxLogger?, initialStateSupplier: () -> S) Properties \u00b6 Name Summary (jvm) state val state: Flow<S> Functions \u00b6 Name Summary (jvm) dispatch suspend fun dispatch(action: A): Unit (jvm) spec fun spec(specBlock: FlowReduxStoreBuilder <S, A>.() -> Unit ): Unit","title":"Index"},{"location":"Javadoc/dsl/com.freeletics.flowredux.dsl/-flow-redux-state-machine/#flowreduxstatemachine","text":"(jvm) abstract class FlowReduxStateMachine<S : Any , A : Any >","title":"FlowReduxStateMachine"},{"location":"Javadoc/dsl/com.freeletics.flowredux.dsl/-flow-redux-state-machine/#constructors","text":"Name Summary (jvm) <init> FlowReduxStateMachine(initialStateSupplier: () -> S) FlowReduxStateMachine(initialState: S) FlowReduxStateMachine(logger: FlowReduxLogger?, initialState: S) FlowReduxStateMachine(logger: FlowReduxLogger?, initialStateSupplier: () -> S)","title":"Constructors"},{"location":"Javadoc/dsl/com.freeletics.flowredux.dsl/-flow-redux-state-machine/#properties","text":"Name Summary (jvm) state val state: Flow<S>","title":"Properties"},{"location":"Javadoc/dsl/com.freeletics.flowredux.dsl/-flow-redux-state-machine/#functions","text":"Name Summary (jvm) dispatch suspend fun dispatch(action: A): Unit (jvm) spec fun spec(specBlock: FlowReduxStoreBuilder <S, A>.() -> Unit ): Unit","title":"Functions"},{"location":"Javadoc/dsl/com.freeletics.flowredux.dsl/-flow-redux-state-machine/-init-/","text":"dsl / com.freeletics.flowredux.dsl / FlowReduxStateMachine / <init> <init> \u00b6 (jvm) FlowReduxStateMachine(initialStateSupplier: () -> S) FlowReduxStateMachine(initialState: S) FlowReduxStateMachine(logger: FlowReduxLogger?, initialState: S) FlowReduxStateMachine(logger: FlowReduxLogger?, initialStateSupplier: () -> S)","title":" init "},{"location":"Javadoc/dsl/com.freeletics.flowredux.dsl/-flow-redux-state-machine/-init-/#init","text":"(jvm) FlowReduxStateMachine(initialStateSupplier: () -> S) FlowReduxStateMachine(initialState: S) FlowReduxStateMachine(logger: FlowReduxLogger?, initialState: S) FlowReduxStateMachine(logger: FlowReduxLogger?, initialStateSupplier: () -> S)","title":"&lt;init&gt;"},{"location":"Javadoc/dsl/com.freeletics.flowredux.dsl/-flow-redux-state-machine/dispatch/","text":"dsl / com.freeletics.flowredux.dsl / FlowReduxStateMachine / dispatch dispatch \u00b6 (jvm) suspend fun dispatch(action: A): Unit","title":"Dispatch"},{"location":"Javadoc/dsl/com.freeletics.flowredux.dsl/-flow-redux-state-machine/dispatch/#dispatch","text":"(jvm) suspend fun dispatch(action: A): Unit","title":"dispatch"},{"location":"Javadoc/dsl/com.freeletics.flowredux.dsl/-flow-redux-state-machine/spec/","text":"dsl / com.freeletics.flowredux.dsl / FlowReduxStateMachine / spec spec \u00b6 (jvm) protected fun spec(specBlock: FlowReduxStoreBuilder <S, A>.() -> Unit ): Unit","title":"Spec"},{"location":"Javadoc/dsl/com.freeletics.flowredux.dsl/-flow-redux-state-machine/spec/#spec","text":"(jvm) protected fun spec(specBlock: FlowReduxStoreBuilder <S, A>.() -> Unit ): Unit","title":"spec"},{"location":"Javadoc/dsl/com.freeletics.flowredux.dsl/-flow-redux-state-machine/state/","text":"dsl / com.freeletics.flowredux.dsl / FlowReduxStateMachine / state state \u00b6 (jvm) val state: Flow<S>","title":"State"},{"location":"Javadoc/dsl/com.freeletics.flowredux.dsl/-flow-redux-state-machine/state/#state","text":"(jvm) val state: Flow<S>","title":"state"},{"location":"Javadoc/dsl/com.freeletics.flowredux.dsl/-flow-redux-store-builder/","text":"dsl / com.freeletics.flowredux.dsl / FlowReduxStoreBuilder FlowReduxStoreBuilder \u00b6 (jvm) class FlowReduxStoreBuilder<S : Any , A : Any > Constructors \u00b6 Name Summary (jvm) <init> FlowReduxStoreBuilder() Properties \u00b6 Name Summary (jvm) builderBlocks val builderBlocks: ArrayList < StoreWideBuilderBlock <S, A>> Functions \u00b6 Name Summary (jvm) inState Define what happens if the store is in a certain state. fun <SubState : S> inState(block: InStateBuilderBlock <S, SubState, A>.() -> Unit ): Unit (jvm) observe Define some global observer to be able to set the state directly from a flow that you observeWhileInState. A common use case would be to observeWhileInState a database fun <T> observe(flow: Flow<T>, flatMapPolicy: FlatMapPolicy = FlatMapPolicy.CONCAT, block: StoreWideObserverBlock <T, S>): Unit","title":"Index"},{"location":"Javadoc/dsl/com.freeletics.flowredux.dsl/-flow-redux-store-builder/#flowreduxstorebuilder","text":"(jvm) class FlowReduxStoreBuilder<S : Any , A : Any >","title":"FlowReduxStoreBuilder"},{"location":"Javadoc/dsl/com.freeletics.flowredux.dsl/-flow-redux-store-builder/#constructors","text":"Name Summary (jvm) <init> FlowReduxStoreBuilder()","title":"Constructors"},{"location":"Javadoc/dsl/com.freeletics.flowredux.dsl/-flow-redux-store-builder/#properties","text":"Name Summary (jvm) builderBlocks val builderBlocks: ArrayList < StoreWideBuilderBlock <S, A>>","title":"Properties"},{"location":"Javadoc/dsl/com.freeletics.flowredux.dsl/-flow-redux-store-builder/#functions","text":"Name Summary (jvm) inState Define what happens if the store is in a certain state. fun <SubState : S> inState(block: InStateBuilderBlock <S, SubState, A>.() -> Unit ): Unit (jvm) observe Define some global observer to be able to set the state directly from a flow that you observeWhileInState. A common use case would be to observeWhileInState a database fun <T> observe(flow: Flow<T>, flatMapPolicy: FlatMapPolicy = FlatMapPolicy.CONCAT, block: StoreWideObserverBlock <T, S>): Unit","title":"Functions"},{"location":"Javadoc/dsl/com.freeletics.flowredux.dsl/-flow-redux-store-builder/-init-/","text":"dsl / com.freeletics.flowredux.dsl / FlowReduxStoreBuilder / <init> <init> \u00b6 (jvm) FlowReduxStoreBuilder()","title":" init "},{"location":"Javadoc/dsl/com.freeletics.flowredux.dsl/-flow-redux-store-builder/-init-/#init","text":"(jvm) FlowReduxStoreBuilder()","title":"&lt;init&gt;"},{"location":"Javadoc/dsl/com.freeletics.flowredux.dsl/-flow-redux-store-builder/builder-blocks/","text":"dsl / com.freeletics.flowredux.dsl / FlowReduxStoreBuilder / builderBlocks builderBlocks \u00b6 (jvm) val builderBlocks: ArrayList < StoreWideBuilderBlock <S, A>>","title":"Builder blocks"},{"location":"Javadoc/dsl/com.freeletics.flowredux.dsl/-flow-redux-store-builder/builder-blocks/#builderblocks","text":"(jvm) val builderBlocks: ArrayList < StoreWideBuilderBlock <S, A>>","title":"builderBlocks"},{"location":"Javadoc/dsl/com.freeletics.flowredux.dsl/-flow-redux-store-builder/in-state/","text":"dsl / com.freeletics.flowredux.dsl / FlowReduxStoreBuilder / inState inState \u00b6 (jvm) inline fun <reified SubState : S> inState(block: InStateBuilderBlock <S, SubState, A>.() -> Unit ): Unit Define what happens if the store is in a certain state.","title":"In state"},{"location":"Javadoc/dsl/com.freeletics.flowredux.dsl/-flow-redux-store-builder/in-state/#instate","text":"(jvm) inline fun <reified SubState : S> inState(block: InStateBuilderBlock <S, SubState, A>.() -> Unit ): Unit Define what happens if the store is in a certain state.","title":"inState"},{"location":"Javadoc/dsl/com.freeletics.flowredux.dsl/-flow-redux-store-builder/observe/","text":"dsl / com.freeletics.flowredux.dsl / FlowReduxStoreBuilder / observe observe \u00b6 (jvm) fun <T> observe(flow: Flow<T>, flatMapPolicy: FlatMapPolicy = FlatMapPolicy.CONCAT, block: StoreWideObserverBlock <T, S>): Unit Define some global observer to be able to set the state directly from a flow that you observeWhileInState. A common use case would be to observeWhileInState a database","title":"Observe"},{"location":"Javadoc/dsl/com.freeletics.flowredux.dsl/-flow-redux-store-builder/observe/#observe","text":"(jvm) fun <T> observe(flow: Flow<T>, flatMapPolicy: FlatMapPolicy = FlatMapPolicy.CONCAT, block: StoreWideObserverBlock <T, S>): Unit Define some global observer to be able to set the state directly from a flow that you observeWhileInState. A common use case would be to observeWhileInState a database","title":"observe"},{"location":"Javadoc/dsl/com.freeletics.flowredux.dsl/-in-state-builder-block/","text":"dsl / com.freeletics.flowredux.dsl / InStateBuilderBlock InStateBuilderBlock \u00b6 (jvm) class InStateBuilderBlock<S : Any , SubState : S, A : Any > : StoreWideBuilderBlock <S, A> Constructors \u00b6 Name Summary (jvm) <init> InStateBuilderBlock(_subStateClass: KClass <SubState>) Properties \u00b6 Name Summary (jvm) _inStateSideEffectBuilders val _inStateSideEffectBuilders: ArrayList < InStateSideEffectBuilder <S, A>> (jvm) _subStateClass val _subStateClass: KClass <SubState> Functions \u00b6 Name Summary (jvm) observeWhileInState fun <T> observeWhileInState(flow: Flow<T>, flatMapPolicy: FlatMapPolicy = FlatMapPolicy.CONCAT, block: InStateObserverBlock <T, S>): Unit (jvm) on fun <SubAction : A> on(flatMapPolicy: FlatMapPolicy = FlatMapPolicy.LATEST, block: OnActionBlock <S, SubAction>): Unit (jvm) onEnter Triggers every time the state machine enters this state. fun onEnter(flatMapPolicy: FlatMapPolicy = FlatMapPolicy.LATEST, block: InStateOnEnterBlock <S>): Unit","title":"Index"},{"location":"Javadoc/dsl/com.freeletics.flowredux.dsl/-in-state-builder-block/#instatebuilderblock","text":"(jvm) class InStateBuilderBlock<S : Any , SubState : S, A : Any > : StoreWideBuilderBlock <S, A>","title":"InStateBuilderBlock"},{"location":"Javadoc/dsl/com.freeletics.flowredux.dsl/-in-state-builder-block/#constructors","text":"Name Summary (jvm) <init> InStateBuilderBlock(_subStateClass: KClass <SubState>)","title":"Constructors"},{"location":"Javadoc/dsl/com.freeletics.flowredux.dsl/-in-state-builder-block/#properties","text":"Name Summary (jvm) _inStateSideEffectBuilders val _inStateSideEffectBuilders: ArrayList < InStateSideEffectBuilder <S, A>> (jvm) _subStateClass val _subStateClass: KClass <SubState>","title":"Properties"},{"location":"Javadoc/dsl/com.freeletics.flowredux.dsl/-in-state-builder-block/#functions","text":"Name Summary (jvm) observeWhileInState fun <T> observeWhileInState(flow: Flow<T>, flatMapPolicy: FlatMapPolicy = FlatMapPolicy.CONCAT, block: InStateObserverBlock <T, S>): Unit (jvm) on fun <SubAction : A> on(flatMapPolicy: FlatMapPolicy = FlatMapPolicy.LATEST, block: OnActionBlock <S, SubAction>): Unit (jvm) onEnter Triggers every time the state machine enters this state. fun onEnter(flatMapPolicy: FlatMapPolicy = FlatMapPolicy.LATEST, block: InStateOnEnterBlock <S>): Unit","title":"Functions"},{"location":"Javadoc/dsl/com.freeletics.flowredux.dsl/-in-state-builder-block/-init-/","text":"dsl / com.freeletics.flowredux.dsl / InStateBuilderBlock / <init> <init> \u00b6 (jvm) InStateBuilderBlock(_subStateClass: KClass <SubState>)","title":" init "},{"location":"Javadoc/dsl/com.freeletics.flowredux.dsl/-in-state-builder-block/-init-/#init","text":"(jvm) InStateBuilderBlock(_subStateClass: KClass <SubState>)","title":"&lt;init&gt;"},{"location":"Javadoc/dsl/com.freeletics.flowredux.dsl/-in-state-builder-block/_in-state-side-effect-builders/","text":"dsl / com.freeletics.flowredux.dsl / InStateBuilderBlock / _inStateSideEffectBuilders _inStateSideEffectBuilders \u00b6 (jvm) val _inStateSideEffectBuilders: ArrayList < InStateSideEffectBuilder <S, A>>","title":" in state side effect builders"},{"location":"Javadoc/dsl/com.freeletics.flowredux.dsl/-in-state-builder-block/_in-state-side-effect-builders/#_instatesideeffectbuilders","text":"(jvm) val _inStateSideEffectBuilders: ArrayList < InStateSideEffectBuilder <S, A>>","title":"_inStateSideEffectBuilders"},{"location":"Javadoc/dsl/com.freeletics.flowredux.dsl/-in-state-builder-block/_sub-state-class/","text":"dsl / com.freeletics.flowredux.dsl / InStateBuilderBlock / _subStateClass _subStateClass \u00b6 (jvm) val _subStateClass: KClass <SubState>","title":" sub state class"},{"location":"Javadoc/dsl/com.freeletics.flowredux.dsl/-in-state-builder-block/_sub-state-class/#_substateclass","text":"(jvm) val _subStateClass: KClass <SubState>","title":"_subStateClass"},{"location":"Javadoc/dsl/com.freeletics.flowredux.dsl/-in-state-builder-block/observe-while-in-state/","text":"dsl / com.freeletics.flowredux.dsl / InStateBuilderBlock / observeWhileInState observeWhileInState \u00b6 (jvm) fun <T> observeWhileInState(flow: Flow<T>, flatMapPolicy: FlatMapPolicy = FlatMapPolicy.CONCAT, block: InStateObserverBlock <T, S>): Unit","title":"Observe while in state"},{"location":"Javadoc/dsl/com.freeletics.flowredux.dsl/-in-state-builder-block/observe-while-in-state/#observewhileinstate","text":"(jvm) fun <T> observeWhileInState(flow: Flow<T>, flatMapPolicy: FlatMapPolicy = FlatMapPolicy.CONCAT, block: InStateObserverBlock <T, S>): Unit","title":"observeWhileInState"},{"location":"Javadoc/dsl/com.freeletics.flowredux.dsl/-in-state-builder-block/on-enter/","text":"dsl / com.freeletics.flowredux.dsl / InStateBuilderBlock / onEnter onEnter \u00b6 (jvm) fun onEnter(flatMapPolicy: FlatMapPolicy = FlatMapPolicy.LATEST, block: InStateOnEnterBlock <S>): Unit Triggers every time the state machine enters this state. This does not cancel any ongoing block when the state changes. TODO add a sample","title":"On enter"},{"location":"Javadoc/dsl/com.freeletics.flowredux.dsl/-in-state-builder-block/on-enter/#onenter","text":"(jvm) fun onEnter(flatMapPolicy: FlatMapPolicy = FlatMapPolicy.LATEST, block: InStateOnEnterBlock <S>): Unit Triggers every time the state machine enters this state. This does not cancel any ongoing block when the state changes. TODO add a sample","title":"onEnter"},{"location":"Javadoc/dsl/com.freeletics.flowredux.dsl/-in-state-builder-block/on/","text":"dsl / com.freeletics.flowredux.dsl / InStateBuilderBlock / on on \u00b6 (jvm) inline fun <reified SubAction : A> on(flatMapPolicy: FlatMapPolicy = FlatMapPolicy.LATEST, noinline block: OnActionBlock <S, SubAction>): Unit","title":"On"},{"location":"Javadoc/dsl/com.freeletics.flowredux.dsl/-in-state-builder-block/on/#on","text":"(jvm) inline fun <reified SubAction : A> on(flatMapPolicy: FlatMapPolicy = FlatMapPolicy.LATEST, noinline block: OnActionBlock <S, SubAction>): Unit","title":"on"},{"location":"Javadoc/dsl/com.freeletics.flowredux.dsl/-on-action-in-state-side-effect-builder/","text":"dsl / com.freeletics.flowredux.dsl / OnActionInStateSideEffectBuilder OnActionInStateSideEffectBuilder \u00b6 (jvm) class OnActionInStateSideEffectBuilder<S : Any , A : Any , SubState : S> : InStateSideEffectBuilder <S, A> Constructors \u00b6 Name Summary (jvm) <init> OnActionInStateSideEffectBuilder(subStateClass: KClass <SubState>, subActionClass: KClass <out A>, flatMapPolicy: FlatMapPolicy , onActionBlock: OnActionBlock <S, A>)","title":"Index"},{"location":"Javadoc/dsl/com.freeletics.flowredux.dsl/-on-action-in-state-side-effect-builder/#onactioninstatesideeffectbuilder","text":"(jvm) class OnActionInStateSideEffectBuilder<S : Any , A : Any , SubState : S> : InStateSideEffectBuilder <S, A>","title":"OnActionInStateSideEffectBuilder"},{"location":"Javadoc/dsl/com.freeletics.flowredux.dsl/-on-action-in-state-side-effect-builder/#constructors","text":"Name Summary (jvm) <init> OnActionInStateSideEffectBuilder(subStateClass: KClass <SubState>, subActionClass: KClass <out A>, flatMapPolicy: FlatMapPolicy , onActionBlock: OnActionBlock <S, A>)","title":"Constructors"},{"location":"Javadoc/dsl/com.freeletics.flowredux.dsl/-on-action-in-state-side-effect-builder/-init-/","text":"dsl / com.freeletics.flowredux.dsl / OnActionInStateSideEffectBuilder / <init> <init> \u00b6 (jvm) OnActionInStateSideEffectBuilder(subStateClass: KClass <SubState>, subActionClass: KClass <out A>, flatMapPolicy: FlatMapPolicy , onActionBlock: OnActionBlock <S, A>)","title":" init "},{"location":"Javadoc/dsl/com.freeletics.flowredux.dsl/-on-action-in-state-side-effect-builder/-init-/#init","text":"(jvm) OnActionInStateSideEffectBuilder(subStateClass: KClass <SubState>, subActionClass: KClass <out A>, flatMapPolicy: FlatMapPolicy , onActionBlock: OnActionBlock <S, A>)","title":"&lt;init&gt;"},{"location":"Javadoc/dsl/com.freeletics.flowredux.dsl/-on-enter-in-state-side-effect-builder/","text":"dsl / com.freeletics.flowredux.dsl / OnEnterInStateSideEffectBuilder OnEnterInStateSideEffectBuilder \u00b6 (jvm) class OnEnterInStateSideEffectBuilder<S : Any , A : Any > : InStateSideEffectBuilder <S, A> A builder that generates a SideEffect that triggers every time the state machine enters a certain state. Constructors \u00b6 Name Summary (jvm) <init> A builder that generates a SideEffect that triggers every time the state machine enters a certain state. OnEnterInStateSideEffectBuilder(subStateClass: KClass <out S>, flatMapPolicy: FlatMapPolicy , block: InStateOnEnterBlock <S>)","title":"Index"},{"location":"Javadoc/dsl/com.freeletics.flowredux.dsl/-on-enter-in-state-side-effect-builder/#onenterinstatesideeffectbuilder","text":"(jvm) class OnEnterInStateSideEffectBuilder<S : Any , A : Any > : InStateSideEffectBuilder <S, A> A builder that generates a SideEffect that triggers every time the state machine enters a certain state.","title":"OnEnterInStateSideEffectBuilder"},{"location":"Javadoc/dsl/com.freeletics.flowredux.dsl/-on-enter-in-state-side-effect-builder/#constructors","text":"Name Summary (jvm) <init> A builder that generates a SideEffect that triggers every time the state machine enters a certain state. OnEnterInStateSideEffectBuilder(subStateClass: KClass <out S>, flatMapPolicy: FlatMapPolicy , block: InStateOnEnterBlock <S>)","title":"Constructors"},{"location":"Javadoc/dsl/com.freeletics.flowredux.dsl/-on-enter-in-state-side-effect-builder/-init-/","text":"dsl / com.freeletics.flowredux.dsl / OnEnterInStateSideEffectBuilder / <init> <init> \u00b6 (jvm) OnEnterInStateSideEffectBuilder(subStateClass: KClass <out S>, flatMapPolicy: FlatMapPolicy , block: InStateOnEnterBlock <S>) A builder that generates a SideEffect that triggers every time the state machine enters a certain state.","title":" init "},{"location":"Javadoc/dsl/com.freeletics.flowredux.dsl/-on-enter-in-state-side-effect-builder/-init-/#init","text":"(jvm) OnEnterInStateSideEffectBuilder(subStateClass: KClass <out S>, flatMapPolicy: FlatMapPolicy , block: InStateOnEnterBlock <S>) A builder that generates a SideEffect that triggers every time the state machine enters a certain state.","title":"&lt;init&gt;"},{"location":"Javadoc/dsl/com.freeletics.flowredux.dsl/-set-state/","text":"dsl / com.freeletics.flowredux.dsl / SetState SetState \u00b6 (jvm) abstract class SetState<S> SetState allows you to set the state of your state machine. It\u2019s just a convinient way along with DSL. Usage: fun doSomething ( setState : SetState < S >) { setState { SomeState } // Return the new state in the lambda. } You can also specify an parameter runIf that is checked before actually running setState block: fun doSomething ( setState : SetState < S >) { // Only executes { SomeState } if runIf={...} returns true setState ( runIf ={ state -> state is FooState }) { SomeState } } Constructors \u00b6 Name Summary (jvm) <init> SetState allows you to set the state of your state machine. It\u2019s just a convinient way along with DSL. Usage: SetState(defaultRunIf: (S) -> Boolean ) Functions \u00b6 Name Summary (jvm) invoke abstract suspend operator fun invoke(runIf: (S) -> Boolean = defaultRunIf, reduce: (currentState: S) -> S): Unit","title":"Index"},{"location":"Javadoc/dsl/com.freeletics.flowredux.dsl/-set-state/#setstate","text":"(jvm) abstract class SetState<S> SetState allows you to set the state of your state machine. It\u2019s just a convinient way along with DSL. Usage: fun doSomething ( setState : SetState < S >) { setState { SomeState } // Return the new state in the lambda. } You can also specify an parameter runIf that is checked before actually running setState block: fun doSomething ( setState : SetState < S >) { // Only executes { SomeState } if runIf={...} returns true setState ( runIf ={ state -> state is FooState }) { SomeState } }","title":"SetState"},{"location":"Javadoc/dsl/com.freeletics.flowredux.dsl/-set-state/#constructors","text":"Name Summary (jvm) <init> SetState allows you to set the state of your state machine. It\u2019s just a convinient way along with DSL. Usage: SetState(defaultRunIf: (S) -> Boolean )","title":"Constructors"},{"location":"Javadoc/dsl/com.freeletics.flowredux.dsl/-set-state/#functions","text":"Name Summary (jvm) invoke abstract suspend operator fun invoke(runIf: (S) -> Boolean = defaultRunIf, reduce: (currentState: S) -> S): Unit","title":"Functions"},{"location":"Javadoc/dsl/com.freeletics.flowredux.dsl/-set-state/-init-/","text":"dsl / com.freeletics.flowredux.dsl / SetState / <init> <init> \u00b6 (jvm) SetState(defaultRunIf: (S) -> Boolean ) SetState allows you to set the state of your state machine. It\u2019s just a convinient way along with DSL. Usage: fun doSomething ( setState : SetState < S >) { setState { SomeState } // Return the new state in the lambda. } You can also specify an parameter runIf that is checked before actually running setState block: fun doSomething ( setState : SetState < S >) { // Only executes { SomeState } if runIf={...} returns true setState ( runIf ={ state -> state is FooState }) { SomeState } }","title":" init "},{"location":"Javadoc/dsl/com.freeletics.flowredux.dsl/-set-state/-init-/#init","text":"(jvm) SetState(defaultRunIf: (S) -> Boolean ) SetState allows you to set the state of your state machine. It\u2019s just a convinient way along with DSL. Usage: fun doSomething ( setState : SetState < S >) { setState { SomeState } // Return the new state in the lambda. } You can also specify an parameter runIf that is checked before actually running setState block: fun doSomething ( setState : SetState < S >) { // Only executes { SomeState } if runIf={...} returns true setState ( runIf ={ state -> state is FooState }) { SomeState } }","title":"&lt;init&gt;"},{"location":"Javadoc/dsl/com.freeletics.flowredux.dsl/-set-state/invoke/","text":"dsl / com.freeletics.flowredux.dsl / SetState / invoke invoke \u00b6 (jvm) abstract suspend operator fun invoke(runIf: (S) -> Boolean = defaultRunIf, reduce: (currentState: S) -> S): Unit","title":"Invoke"},{"location":"Javadoc/dsl/com.freeletics.flowredux.dsl/-set-state/invoke/#invoke","text":"(jvm) abstract suspend operator fun invoke(runIf: (S) -> Boolean = defaultRunIf, reduce: (currentState: S) -> S): Unit","title":"invoke"},{"location":"Javadoc/dsl/com.freeletics.flowredux.dsl/kotlinx.coroutines.flow.-flow/","text":"dsl / com.freeletics.flowredux.dsl / kotlinx.coroutines.flow.Flow Extensions for kotlinx.coroutines.flow.Flow \u00b6 Name Summary (jvm) reduxStore Provides a fluent DSL to specify a ReduxStore fun <S : Any , A : Any > Flow<A>.reduxStore(logger: FlowReduxLogger? = null, initialStateSupplier: () -> S, block: FlowReduxStoreBuilder <S, A>.() -> Unit ): Flow<S> fun <S : Any , A : Any > Flow<A>.reduxStore(logger: FlowReduxLogger? = null, initialState: S, block: FlowReduxStoreBuilder <S, A>.() -> Unit ): Flow<S>","title":"Index"},{"location":"Javadoc/dsl/com.freeletics.flowredux.dsl/kotlinx.coroutines.flow.-flow/#extensions-for-kotlinxcoroutinesflowflow","text":"Name Summary (jvm) reduxStore Provides a fluent DSL to specify a ReduxStore fun <S : Any , A : Any > Flow<A>.reduxStore(logger: FlowReduxLogger? = null, initialStateSupplier: () -> S, block: FlowReduxStoreBuilder <S, A>.() -> Unit ): Flow<S> fun <S : Any , A : Any > Flow<A>.reduxStore(logger: FlowReduxLogger? = null, initialState: S, block: FlowReduxStoreBuilder <S, A>.() -> Unit ): Flow<S>","title":"Extensions for kotlinx.coroutines.flow.Flow"},{"location":"Javadoc/dsl/com.freeletics.flowredux.dsl/kotlinx.coroutines.flow.-flow/redux-store/","text":"dsl / com.freeletics.flowredux.dsl / kotlinx.coroutines.flow.Flow / reduxStore reduxStore \u00b6 (jvm) fun <S : Any , A : Any > Flow<A>.reduxStore(logger: FlowReduxLogger? = null, initialStateSupplier: () -> S, block: FlowReduxStoreBuilder <S, A>.() -> Unit ): Flow<S> fun <S : Any , A : Any > Flow<A>.reduxStore(logger: FlowReduxLogger? = null, initialState: S, block: FlowReduxStoreBuilder <S, A>.() -> Unit ): Flow<S> Provides a fluent DSL to specify a ReduxStore","title":"Redux store"},{"location":"Javadoc/dsl/com.freeletics.flowredux.dsl/kotlinx.coroutines.flow.-flow/redux-store/#reduxstore","text":"(jvm) fun <S : Any , A : Any > Flow<A>.reduxStore(logger: FlowReduxLogger? = null, initialStateSupplier: () -> S, block: FlowReduxStoreBuilder <S, A>.() -> Unit ): Flow<S> fun <S : Any , A : Any > Flow<A>.reduxStore(logger: FlowReduxLogger? = null, initialState: S, block: FlowReduxStoreBuilder <S, A>.() -> Unit ): Flow<S> Provides a fluent DSL to specify a ReduxStore","title":"reduxStore"},{"location":"Javadoc/flowredux/","text":"flowredux Packages \u00b6 Name Summary (jvm) com.freeletics.flowredux Index \u00b6 All Types","title":"Index"},{"location":"Javadoc/flowredux/#packages","text":"Name Summary (jvm) com.freeletics.flowredux","title":"Packages"},{"location":"Javadoc/flowredux/#index","text":"All Types","title":"Index"},{"location":"Javadoc/flowredux/alltypes/","text":"All Types \u00b6 Name Summary (jvm) (extensions in package com.freeletics.flowredux) kotlinx.coroutines.flow.Flow \u00b6 |(jvm) com.freeletics.flowredux.FlowReduxLogger \u00b6 |(jvm) com.freeletics.flowredux.Reducer \u00b6 A simple type alias for a reducer function. A Reducer takes a State and an Action as input and produces a state as output. |(jvm) com.freeletics.flowredux.ReducerException \u00b6 |(jvm) com.freeletics.flowredux.SideEffect \u00b6 It is a function which takes a stream of actions and returns a stream of actions. Actions in, actions out (concept borrowed from redux-observable.js.or - so called epics). |(jvm) com.freeletics.flowredux.StateAccessor \u00b6 The StateAccessor is basically just a deferred way to get a state of a reduxStore at any given point in time. So you have to call this method to get the state.","title":"Index"},{"location":"Javadoc/flowredux/alltypes/#all-types","text":"Name Summary (jvm) (extensions in package com.freeletics.flowredux)","title":"All Types"},{"location":"Javadoc/flowredux/alltypes/#kotlinxcoroutinesflowflow","text":"|(jvm)","title":"kotlinx.coroutines.flow.Flow"},{"location":"Javadoc/flowredux/alltypes/#comfreeleticsflowreduxflowreduxlogger","text":"|(jvm)","title":"com.freeletics.flowredux.FlowReduxLogger"},{"location":"Javadoc/flowredux/alltypes/#comfreeleticsflowreduxreducer","text":"A simple type alias for a reducer function. A Reducer takes a State and an Action as input and produces a state as output. |(jvm)","title":"com.freeletics.flowredux.Reducer"},{"location":"Javadoc/flowredux/alltypes/#comfreeleticsflowreduxreducerexception","text":"|(jvm)","title":"com.freeletics.flowredux.ReducerException"},{"location":"Javadoc/flowredux/alltypes/#comfreeleticsflowreduxsideeffect","text":"It is a function which takes a stream of actions and returns a stream of actions. Actions in, actions out (concept borrowed from redux-observable.js.or - so called epics). |(jvm)","title":"com.freeletics.flowredux.SideEffect"},{"location":"Javadoc/flowredux/alltypes/#comfreeleticsflowreduxstateaccessor","text":"The StateAccessor is basically just a deferred way to get a state of a reduxStore at any given point in time. So you have to call this method to get the state.","title":"com.freeletics.flowredux.StateAccessor"},{"location":"Javadoc/flowredux/com.freeletics.flowredux/","text":"flowredux / com.freeletics.flowredux Package com.freeletics.flowredux \u00b6 Types \u00b6 Name Summary (jvm) FlowReduxLogger interface FlowReduxLogger (jvm) Reducer A simple type alias for a reducer function. A Reducer takes a State and an Action as input and produces a state as output. typealias Reducer<S, A> = (S, A) -> S (jvm) SideEffect It is a function which takes a stream of actions and returns a stream of actions. Actions in, actions out (concept borrowed from redux-observable.js.or - so called epics). typealias SideEffect<S, A> = (actions: Flow<A>, state: StateAccessor <S>) -> Flow<A> (jvm) StateAccessor The StateAccessor is basically just a deferred way to get a state of a reduxStore at any given point in time. So you have to call this method to get the state. typealias StateAccessor<S> = () -> S Exceptions \u00b6 Name Summary (jvm) ReducerException class ReducerException : RuntimeException Extensions for External Classes \u00b6 Name Summary (jvm) kotlinx.coroutines.flow.Flow","title":"Index"},{"location":"Javadoc/flowredux/com.freeletics.flowredux/#package-comfreeleticsflowredux","text":"","title":"Package com.freeletics.flowredux"},{"location":"Javadoc/flowredux/com.freeletics.flowredux/#types","text":"Name Summary (jvm) FlowReduxLogger interface FlowReduxLogger (jvm) Reducer A simple type alias for a reducer function. A Reducer takes a State and an Action as input and produces a state as output. typealias Reducer<S, A> = (S, A) -> S (jvm) SideEffect It is a function which takes a stream of actions and returns a stream of actions. Actions in, actions out (concept borrowed from redux-observable.js.or - so called epics). typealias SideEffect<S, A> = (actions: Flow<A>, state: StateAccessor <S>) -> Flow<A> (jvm) StateAccessor The StateAccessor is basically just a deferred way to get a state of a reduxStore at any given point in time. So you have to call this method to get the state. typealias StateAccessor<S> = () -> S","title":"Types"},{"location":"Javadoc/flowredux/com.freeletics.flowredux/#exceptions","text":"Name Summary (jvm) ReducerException class ReducerException : RuntimeException","title":"Exceptions"},{"location":"Javadoc/flowredux/com.freeletics.flowredux/#extensions-for-external-classes","text":"Name Summary (jvm) kotlinx.coroutines.flow.Flow","title":"Extensions for External Classes"},{"location":"Javadoc/flowredux/com.freeletics.flowredux/-reducer/","text":"flowredux / com.freeletics.flowredux / Reducer Reducer \u00b6 (jvm) typealias Reducer<S, A> = (S, A) -> S A simple type alias for a reducer function. A Reducer takes a State and an Action as input and produces a state as output. If a reducer should not react on a Action, just return the old State. Parameters \u00b6 S - The type of the state A - The type of the Actions","title":" reducer"},{"location":"Javadoc/flowredux/com.freeletics.flowredux/-reducer/#reducer","text":"(jvm) typealias Reducer<S, A> = (S, A) -> S A simple type alias for a reducer function. A Reducer takes a State and an Action as input and produces a state as output. If a reducer should not react on a Action, just return the old State.","title":"Reducer"},{"location":"Javadoc/flowredux/com.freeletics.flowredux/-reducer/#parameters","text":"S - The type of the state A - The type of the Actions","title":"Parameters"},{"location":"Javadoc/flowredux/com.freeletics.flowredux/-side-effect/","text":"flowredux / com.freeletics.flowredux / SideEffect SideEffect \u00b6 (jvm) typealias SideEffect<S, A> = (actions: Flow<A>, state: StateAccessor <S>) -> Flow<A> It is a function which takes a stream of actions and returns a stream of actions. Actions in, actions out (concept borrowed from redux-observable.js.or - so called epics). Parameters \u00b6 actions - Input action. Every SideEffect should be responsible to handle a single Action (i.e using filter or ofType operator) state - StateAccessor to get the latest state of the state machine","title":" side effect"},{"location":"Javadoc/flowredux/com.freeletics.flowredux/-side-effect/#sideeffect","text":"(jvm) typealias SideEffect<S, A> = (actions: Flow<A>, state: StateAccessor <S>) -> Flow<A> It is a function which takes a stream of actions and returns a stream of actions. Actions in, actions out (concept borrowed from redux-observable.js.or - so called epics).","title":"SideEffect"},{"location":"Javadoc/flowredux/com.freeletics.flowredux/-side-effect/#parameters","text":"actions - Input action. Every SideEffect should be responsible to handle a single Action (i.e using filter or ofType operator) state - StateAccessor to get the latest state of the state machine","title":"Parameters"},{"location":"Javadoc/flowredux/com.freeletics.flowredux/-state-accessor/","text":"flowredux / com.freeletics.flowredux / StateAccessor StateAccessor \u00b6 (jvm) typealias StateAccessor<S> = () -> S The StateAccessor is basically just a deferred way to get a state of a reduxStore at any given point in time. So you have to call this method to get the state.","title":" state accessor"},{"location":"Javadoc/flowredux/com.freeletics.flowredux/-state-accessor/#stateaccessor","text":"(jvm) typealias StateAccessor<S> = () -> S The StateAccessor is basically just a deferred way to get a state of a reduxStore at any given point in time. So you have to call this method to get the state.","title":"StateAccessor"},{"location":"Javadoc/flowredux/com.freeletics.flowredux/-flow-redux-logger/","text":"flowredux / com.freeletics.flowredux / FlowReduxLogger FlowReduxLogger \u00b6 (jvm) interface FlowReduxLogger Functions \u00b6 Name Summary (jvm) log abstract fun log(message: String ): Unit","title":"Index"},{"location":"Javadoc/flowredux/com.freeletics.flowredux/-flow-redux-logger/#flowreduxlogger","text":"(jvm) interface FlowReduxLogger","title":"FlowReduxLogger"},{"location":"Javadoc/flowredux/com.freeletics.flowredux/-flow-redux-logger/#functions","text":"Name Summary (jvm) log abstract fun log(message: String ): Unit","title":"Functions"},{"location":"Javadoc/flowredux/com.freeletics.flowredux/-flow-redux-logger/log/","text":"flowredux / com.freeletics.flowredux / FlowReduxLogger / log log \u00b6 (jvm) abstract fun log(message: String ): Unit","title":"Log"},{"location":"Javadoc/flowredux/com.freeletics.flowredux/-flow-redux-logger/log/#log","text":"(jvm) abstract fun log(message: String ): Unit","title":"log"},{"location":"Javadoc/flowredux/com.freeletics.flowredux/-reducer-exception/","text":"flowredux / com.freeletics.flowredux / ReducerException ReducerException \u00b6 (jvm) class ReducerException : RuntimeException Constructors \u00b6 Name Summary (jvm) <init> ReducerException(state: Any , action: Any , cause: Throwable )","title":"Index"},{"location":"Javadoc/flowredux/com.freeletics.flowredux/-reducer-exception/#reducerexception","text":"(jvm) class ReducerException : RuntimeException","title":"ReducerException"},{"location":"Javadoc/flowredux/com.freeletics.flowredux/-reducer-exception/#constructors","text":"Name Summary (jvm) <init> ReducerException(state: Any , action: Any , cause: Throwable )","title":"Constructors"},{"location":"Javadoc/flowredux/com.freeletics.flowredux/-reducer-exception/-init-/","text":"flowredux / com.freeletics.flowredux / ReducerException / <init> <init> \u00b6 (jvm) ReducerException(state: Any , action: Any , cause: Throwable )","title":" init "},{"location":"Javadoc/flowredux/com.freeletics.flowredux/-reducer-exception/-init-/#init","text":"(jvm) ReducerException(state: Any , action: Any , cause: Throwable )","title":"&lt;init&gt;"},{"location":"Javadoc/flowredux/com.freeletics.flowredux/kotlinx.coroutines.flow.-flow/","text":"flowredux / com.freeletics.flowredux / kotlinx.coroutines.flow.Flow Extensions for kotlinx.coroutines.flow.Flow \u00b6 Name Summary (jvm) reduxStore fun <A, S> Flow<A>.reduxStore(initialStateSupplier: () -> S, sideEffects: Iterable < SideEffect <S, A>>, logger: FlowReduxLogger ? = null, reducer: Reducer <S, A>): Flow<S>","title":"Index"},{"location":"Javadoc/flowredux/com.freeletics.flowredux/kotlinx.coroutines.flow.-flow/#extensions-for-kotlinxcoroutinesflowflow","text":"Name Summary (jvm) reduxStore fun <A, S> Flow<A>.reduxStore(initialStateSupplier: () -> S, sideEffects: Iterable < SideEffect <S, A>>, logger: FlowReduxLogger ? = null, reducer: Reducer <S, A>): Flow<S>","title":"Extensions for kotlinx.coroutines.flow.Flow"},{"location":"Javadoc/flowredux/com.freeletics.flowredux/kotlinx.coroutines.flow.-flow/redux-store/","text":"flowredux / com.freeletics.flowredux / kotlinx.coroutines.flow.Flow / reduxStore reduxStore \u00b6 (jvm) @ExperimentalCoroutinesApi @FlowPreview fun <A, S> Flow<A>.reduxStore(initialStateSupplier: () -> S, sideEffects: Iterable < SideEffect <S, A>>, logger: FlowReduxLogger ? = null, reducer: Reducer <S, A>): Flow<S>","title":"Redux store"},{"location":"Javadoc/flowredux/com.freeletics.flowredux/kotlinx.coroutines.flow.-flow/redux-store/#reduxstore","text":"(jvm) @ExperimentalCoroutinesApi @FlowPreview fun <A, S> Flow<A>.reduxStore(initialStateSupplier: () -> S, sideEffects: Iterable < SideEffect <S, A>>, logger: FlowReduxLogger ? = null, reducer: Reducer <S, A>): Flow<S>","title":"reduxStore"}]}